{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["containerStyle","marginTop","marginBottom","padding","textAlign","marginLeft","marginRight","buttonStyle","background","styles","theme","container","display","flexWrap","textField","spacing","unit","dense","menu","width","Bookcard","props","react_default","a","createElement","bookcard","length","className","map","index","Grid_default","Paper_default","style","key","src","image","alt","title","authors","publisher","href","link","target","rel","Button_default","variant","color","Bookfinder","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","query","errorMessage","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","value","preventDefault","fetchData","_this2","fetch","concat","then","items","json","data","book","volumeInfo","imageLinks","thumbnail","infoLink","class","onSubmit","TextField_default","type","onChange","placeholder","id","height","defaultValue","margin","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c5211e00.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nconst containerStyle = {\n  marginTop: '1rem',\n  marginBottom: '1rem',\n  padding: '2rem',\n  textAlign: 'center',\n  marginLeft: 'auto',\n  marginRight: 'auto',\n}\n\nconst buttonStyle = { \n  marginTop: '1rem',\n  marginLeft: '1rem', \n  background: '#FF9900'\n\n}\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n  },\n  dense: {\n    marginTop: 16,\n  },\n  menu: {\n    width: 500,\n  },\n});\n\nfunction Bookcard(props){\n  return (\n    <div>\n      {props.bookcard.length === 0 && <p className='widget_message'>Nothing to see here yet...</p>}\n          {props.bookcard.map((bookcard, index) => {\n            return (\n              <Grid container spacing={30}>\n                <Paper style={containerStyle}>\n                  <div key={index}>\n                    <img src={bookcard.image} alt='' />            \n                    <div>{bookcard.title}</div>\n                    <div>Author: {bookcard.authors || 'N/A' }</div>\n                    <div>Publisher: {bookcard.publisher || 'N/A'}</div>\n                    <a href={bookcard.link} target='_blank' rel='noopener noreferrer'>\n                      <Button style={buttonStyle} variant=\"contained\" color=\"default\" >More Info</Button>\n                    </a>\n                  </div>\n                </Paper>\n              </Grid>\n            )\n          })}\n     </div>\n  )\n  }\n\nclass Bookfinder extends Component {\n  constructor(props){\n    super(props)\n      this.state = {\n        query: '',\n        bookcard: [],\n        errorMessage: false\n      }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    }\n  \n  handleChange(event) {\n    this.setState({query: event.target.value})\n  }\n\n  handleSubmit(event){\n    event.preventDefault()  \n    if(this.state.query !== ''){\n      this.fetchData();\n    } else {\n      this.setState({errorMessage: 'Error! Search parameter cannot be empty.'})\n    }\n  }\n\n  fetchData() {\n  const URL = 'https://www.googleapis.com/books/v1/volumes?'\n    const KEY = 'AIzaSyAKEzqn36DCHQCQHLZ4g2oAr3Sq79EV3T4'\n    fetch(`${URL}q=${this.state.query}&key=${KEY}`)\n      .then(items => {\n        return items.json();\n      }).then(data => {\n        let bookcard = data.items.map((book) => {\n          return {           \n              image: book.volumeInfo.imageLinks.thumbnail,\n              title: book.volumeInfo.title,\n              authors: book.volumeInfo.authors[0],\n              publisher: book.volumeInfo.publisher,\n              link: book.volumeInfo.infoLink\n            }\n        })\n        this.setState({ bookcard: bookcard })\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <div className='header'>\n          <h1 className='header'><i class=\"fas fa-book\"></i>Book Finder</h1>\n        </div>\n        <div>\n          <form onSubmit={this.handleSubmit}>\n            <div className='form'>\n              <TextField\n                type='text'\n                value={this.state.query}\n                onChange={this.handleChange}\n                placeholder='search book title or author...'\n                id=\"outlined-bare\"\n                className={styles}\n                style={{ width: 300, height: 40 }}\n                defaultValue=\"Bare\"\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            </div>\n            <div className='form'>\n              <Button\n                type='submit'\n                value='search'\n                style={buttonStyle}\n                variant=\"contained\"\n                color=\"default\" >Search\n            </Button>\n            </div>\n          </form> \n          <div>\n            <Bookcard bookcard={this.state.bookcard} /> \n          </div>  \n        </div>  \n      </div>\n    );\n  }\n}\n\nexport default Bookfinder;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}