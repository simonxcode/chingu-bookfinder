{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Bookcard","props","react_default","a","createElement","bookcard","map","index","key","src","image","alt","title","authors","publisher","href","infoLink","Bookfinder","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","query","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","value","preventDefault","fetchData","_this2","fetch","concat","then","items","json","data","book","volumeInfo","imageLinks","thumbnail","link","onSubmit","type","onChange","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2MAIA,SAASA,EAASC,GAChB,OACEC,EAAAC,EAAAC,cAAA,WACGH,EAAMI,SAASC,IAAI,SAACD,EAAUE,GAC7B,OACEL,EAAAC,EAAAC,cAAA,OAAKI,IAAKD,GACRL,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKK,IAAKJ,EAASK,MAAOC,IAAKN,EAASO,SAC7CV,EAAAC,EAAAC,cAAA,WAAMC,EAASO,OACfV,EAAAC,EAAAC,cAAA,sBAAcC,EAASQ,SACvBX,EAAAC,EAAAC,cAAA,yBAAiBC,EAASS,WAC1BZ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGW,KAAMV,EAASW,UAAUd,EAAAC,EAAAC,cAAA,qCAyE9Ba,cAhEb,SAAAA,EAAYhB,GAAM,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMpB,KACCwB,MAAQ,CACXC,MAAO,GACPrB,SAAU,IAEda,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IACpBA,EAAKY,aAAeZ,EAAKY,aAAaF,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IAPJA,4EAULa,GACXV,KAAKW,SAAS,CAACN,MAAOK,EAAME,OAAOC,6CAGxBH,GACXA,EAAMI,iBACNd,KAAKe,gDAGK,IAAAC,EAAAhB,KAGViB,MAAK,GAAAC,OAFK,+CAEL,MAAAA,OAAYlB,KAAKI,MAAMC,MAAvB,SAAAa,OADO,4CAETC,KAAK,SAAAC,GACJ,OAAOA,EAAMC,SACZF,KAAK,SAAAG,GACN,IAAItC,EAAWsC,EAAKF,MAAMnC,IAAI,SAACsC,GAC3B,MAAO,CACLlC,MAAOkC,EAAKC,WAAWC,WAAWC,UAClCnC,MAAOgC,EAAKC,WAAWjC,MACvBC,QAAS+B,EAAKC,WAAWhC,QAAQ,GACjCC,UAAW8B,EAAKC,WAAW/B,UAC3BkC,KAAMJ,EAAKC,WAAW7B,YAG5BqB,EAAKL,SAAS,CAAE3B,SAAUA,uCAK9B,OACEH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAM6C,SAAU5B,KAAKS,cACnB5B,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SACE8C,KAAK,OACLhB,MAAOb,KAAKI,MAAMC,MAClByB,SAAU9B,KAAKM,aACfyB,YAAY,oCAGdlD,EAAAC,EAAAC,cAAA,SACE8C,KAAK,SACLhB,MAAM,YAGVhC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACJ,EAAD,CAAUK,SAAUgB,KAAKI,MAAMpB,oBA1DhBgD,aCVLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.ae15e85d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import './App.css';\n\n\nfunction Bookcard(props){\n  return (\n    <div>\n      {props.bookcard.map((bookcard, index) => {\n        return (\n          <div key={index}>\n            <div><img src={bookcard.image} alt={bookcard.title} /></div>\n            <div>{bookcard.title}</div>\n            <div>Author: {bookcard.authors}</div>\n            <div>Publisher: {bookcard.publisher}</div>\n            <div><a href={bookcard.infoLink}><button>More Info</button></a></div>\n          </div>\n        )\n      })}\n    </div>\n  )\n  }\n\nclass Bookfinder extends Component {\n  constructor(props){\n    super(props)\n      this.state = {\n        query: '',\n        bookcard: []\n      }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    }\n  \n  handleChange(event) {\n    this.setState({query: event.target.value})\n  }\n\n  handleSubmit(event){\n    event.preventDefault()  \n    this.fetchData();\n  }\n\n  fetchData() {\n  const URL = 'https://www.googleapis.com/books/v1/volumes?'\n    const KEY = 'AIzaSyAKEzqn36DCHQCQHLZ4g2oAr3Sq79EV3T4'\n    fetch(`${URL}q=${this.state.query}&key=${KEY}`)\n      .then(items => {\n        return items.json();\n      }).then(data => {\n        let bookcard = data.items.map((book) => {\n            return {\n              image: book.volumeInfo.imageLinks.thumbnail,\n              title: book.volumeInfo.title,\n              authors: book.volumeInfo.authors[0],\n              publisher: book.volumeInfo.publisher,\n              link: book.volumeInfo.infoLink\n            }\n        })\n        this.setState({ bookcard: bookcard })\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            <input\n              type='text'\n              value={this.state.query}\n              onChange={this.handleChange}\n              placeholder='search book title or author...'\n            />\n          </label>\n            <input\n              type='submit'\n              value='Submit'\n            />\n        </form> \n          <div>\n          <Bookcard bookcard={this.state.bookcard} /> \n          </div>  \n      </div>  \n    );\n  }\n}\n\nexport default Bookfinder;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}